
#include "stdafx.h"
#include <Windows.h>
#include <string>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <ctime>
#include <string.h>
#include <corecrt.h>
//http://image.prntscr.com/image/2cafdf4236a04d6584f3093a1fce3056.png
using namespace std;
using std::cin;
using std::cout;
using std::endl;
//372 to 393 valid

//include maps
#include "331to350.h" //valid
#include "350to372.h" //valid
#include "372to393.h" //valid
#include "393to463.h" //valid
#include "463to505.h" //valid
#include "505to573.h" //valid
#include "573to617.h" //valid
#include "617to678.h" //valid
#include "678to757.h" //valid
#include "757to791.h" //valid
#include "791to877.h" //valid

/*
Native hash maps readme :
 
You are not allowed to use this info if you want to tamper (or grant an ability to do so) with active R* hosted sessions of GTA:O .
 
~Alexander Blade & Force67 aka ghost30812
*/

//i used llvm 2014 to compile as vs compiler didnt compile !

template <typename T>
void print(T x)
{
	cout << x << endl;
}

bool a1 = false, a2 = false, a3 = false, a4 = false, a5 = false, a6 = false, a7 = false, a8 = false, a9 = false, a10 = false, addi = false;
static bool once = 0;

static std::unordered_map<uint64_t, uint64_t> base = threethreeonetothreefifty;

void translate(const char* filename,std::string mapname,int endparam,int startvparam)
{
	switch (endparam)
	{
	case 350: base = threethreeonetothreefifty; addi = true; break;
	case 372: a1 = true; break;
	case 393: a1 = true; a2 = true; break;
	case 463: a1 = true; a2 = true; a3 = true; break;
	case 505: a1 = true; a2 = true; a3 = true; a4 = true; break;
	case 573: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; break;
	case 617: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; a6 = true; break;
	case 678: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; a6 = true; a7 = true; break;
	case 757: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; a6 = true; a7 = true; a8 = true; break;
	case 791: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; a6 = true; a7 = true; a8 = true; a9 = true; break;
	case 877: a1 = true; a2 = true; a3 = true; a4 = true; a5 = true; a6 = true; a7 = true; a8 = true; a9 = true; a10 = true; break;
	default: print("End Version invalid ! terminating!"); exit(1); break;
	}
	switch (startvparam)
	{
	case 0: break;
	case 331: base = threethreeonetothreefifty; break;
	case 350: base = threefiftytothreeseventwo; a1 = false; break;
	case 372: base = threeeseventwotothreeninethree; a1 = false; a2 = false; break;
	case 393: base = threeninethreetofoursixthree; a1 = false; a2 = false; a3 = false; break;
	case 463: base = foursixthreetofivezerofive; a1 = false; a2 = false; a3 = false; a4 = false; break;
	case 505: base = fivezerofivetofiveseventhree; a1 = false; a2 = false; a3 = false; a4 = false; a5 = false; break;
	case 573: base = fiveseventhreetosixoneseven; a1 = false; a2 = false; a3 = false; a4 = false; a5 = false; a6 = false; break;
	case 617: base = sixoneseventosixseveneight; a1 = false; a2 = false; a3 = false; a4 = false; a5 = false; a6 = false; a7 = false; break;
	case 678: base = sixseveneighttosevenfiveseven; a1 = false; a2 = false; a3 = false; a4 = false; a5 = false; a6 = false; a7 = false; a8 = false; break;
	case 757: base = sevenfiveseventosevennineone; break;
	case 791: base = sevennineonetoeightsevenseven; break;
	case 877: print("A higher version then 791 doesnt exist! terminating!"); exit(1); break;
	default: print("Start Version invalid ! terminating!"); exit(1); break;
	}
	ofstream outfile(filename, std::ofstream::out);
	uint64_t newHash = 0,oldHash = 0;
	std::time_t result = std::time(nullptr);
	outfile << "//Generated by Force67's / ghost30812's Hash table maker on : " << std::asctime(std::localtime(&result)) /*<< result*/ << endl;
	outfile << "" << endl;
	outfile << "#include <unordered_map>" << endl;
	outfile << "" << endl;
	if (startvparam == 0) { startvparam = 331; }
	outfile << "//translated from " << startvparam <<  " to " << endparam << endl;
	outfile << "" << endl;
	outfile << "static std::unordered_map<uint64_t, uint64_t>" << " " << mapname << " = {" << endl;
	outfile << "" << endl;
	outfile << "//     " << startvparam << "                  " << endparam << endl;
	if (!addi)
	{
		for (auto& pair : base)
		{
				oldHash = pair.first;

			//newHash = threethreeonetothreefifty.find(pair.second)->second; //331 to 350
			if (a1)
			{
				newHash = threefiftytothreeseventwo.find(pair.second)->second; //350 to 372
			}
			if (a2)
			{
				newHash = threeeseventwotothreeninethree.find(newHash)->second; //372 to 393
			}
			if (a3)
			{
				newHash = threeninethreetofoursixthree.find(newHash)->second; //393 to 463
			}
			if (a4)
			{
				newHash = foursixthreetofivezerofive.find(newHash)->second; //463 to 505
			}
			if (a5)
			{
				newHash = fivezerofivetofiveseventhree.find(newHash)->second; //505 to 573
			}
			if (a6)
			{
				newHash = fiveseventhreetosixoneseven.find(newHash)->second; //573 to 617
			}
			if (a7)
			{
				newHash = sixoneseventosixseveneight.find(newHash)->second; //617 to 678
			}
			if (a8)
			{
				newHash = sixseveneighttosevenfiveseven.find(newHash)->second; //678 to 757
			}
			if (a9)
			{
				newHash = sevenfiveseventosevennineone.find(newHash)->second; //757 to 791
			}
			if (a10)
			{
				newHash = sevennineonetoeightsevenseven.find(newHash)->second; //791 to 877
			}

			outfile << "{ 0x" << hex << uppercase << oldHash << ", 0x" << hex << uppercase << newHash << "}," << endl;
			cout << "{ 0x" << hex << uppercase << oldHash << ", 0x" << hex << uppercase << newHash << "}," << endl;
		}
	}
	else
	{
		//for (int i = threethreeonetothreefifty.size(); i--;)
		for (auto& pair : threethreeonetothreefifty)
		{
			outfile << "{ 0x" << hex << uppercase << threethreeonetothreefifty.find(pair.first)->first << ", 0x" << hex << uppercase << threethreeonetothreefifty.find(pair.first)->second << "}," << endl;
		}
	}
	outfile << "};" << endl;
	outfile << "" << endl;
	outfile << "//end of file : " << filename << endl;

}

int main()
{
	char * l = __TIMESTAMP__;
	int endvers, startvers;
	std::string ll = l;
	std::string lll = "Hashtablemaker : (Build " + ll + " ) [Created by Force67]";
	SetConsoleTitleA(lll.c_str());
	string lol, lol2;
	print("Starting hash translator! < able to generate from 331 to 877 rofl >");
	print("Enter filename !");
	cin >> lol;
	print("Please enter the startvers : ");
	print("Valid are :\n 350,372,393,463,505,573,\n 617,678,757,791");
	print("0 to skip this step!");
	cin >> startvers;
	print("Please enter the endvers (350 - 877)");
	print("Valid are :\n 350,372,393,463,505,573,\n 617,678,757,791,877");
	cin >> endvers;
	if (endvers < 350 && 877 < endvers)
	{
		print("Invalid endvers... Terminating!");
		exit(1);
	}
	print("Enter unordered_map name !");
	cin >> lol2;
	translate(lol.c_str(),lol2,endvers, startvers);
}

